// Code generated by "enumer -type CompressionLevel -trimprefix Compression -transform lower -text -output compression_string.go"; DO NOT EDIT.

package config

import (
	"fmt"
	"strings"
)

const _CompressionLevelName = "defaultnonefastbest"

var _CompressionLevelIndex = [...]uint8{0, 7, 11, 15, 19}

const _CompressionLevelLowerName = "defaultnonefastbest"

func (i CompressionLevel) String() string {
	if i < 0 || i >= CompressionLevel(len(_CompressionLevelIndex)-1) {
		return fmt.Sprintf("CompressionLevel(%d)", i)
	}
	return _CompressionLevelName[_CompressionLevelIndex[i]:_CompressionLevelIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _CompressionLevelNoOp() {
	var x [1]struct{}
	_ = x[CompressionDefault-(0)]
	_ = x[CompressionNone-(1)]
	_ = x[CompressionFast-(2)]
	_ = x[CompressionBest-(3)]
}

var _CompressionLevelValues = []CompressionLevel{CompressionDefault, CompressionNone, CompressionFast, CompressionBest}

var _CompressionLevelNameToValueMap = map[string]CompressionLevel{
	_CompressionLevelName[0:7]:        CompressionDefault,
	_CompressionLevelLowerName[0:7]:   CompressionDefault,
	_CompressionLevelName[7:11]:       CompressionNone,
	_CompressionLevelLowerName[7:11]:  CompressionNone,
	_CompressionLevelName[11:15]:      CompressionFast,
	_CompressionLevelLowerName[11:15]: CompressionFast,
	_CompressionLevelName[15:19]:      CompressionBest,
	_CompressionLevelLowerName[15:19]: CompressionBest,
}

var _CompressionLevelNames = []string{
	_CompressionLevelName[0:7],
	_CompressionLevelName[7:11],
	_CompressionLevelName[11:15],
	_CompressionLevelName[15:19],
}

// CompressionLevelString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CompressionLevelString(s string) (CompressionLevel, error) {
	if val, ok := _CompressionLevelNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _CompressionLevelNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CompressionLevel values", s)
}

// CompressionLevelValues returns all values of the enum
func CompressionLevelValues() []CompressionLevel {
	return _CompressionLevelValues
}

// CompressionLevelStrings returns a slice of all String values of the enum
func CompressionLevelStrings() []string {
	strs := make([]string, len(_CompressionLevelNames))
	copy(strs, _CompressionLevelNames)
	return strs
}

// IsACompressionLevel returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CompressionLevel) IsACompressionLevel() bool {
	for _, v := range _CompressionLevelValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for CompressionLevel
func (i CompressionLevel) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for CompressionLevel
func (i *CompressionLevel) UnmarshalText(text []byte) error {
	var err error
	*i, err = CompressionLevelString(string(text))
	return err
}
